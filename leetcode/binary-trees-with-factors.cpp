// https://leetcode.com/problems/binary-trees-with-factors/

#include<bits/stdc++.h>

using namespace std;

class Solution {
public:
    // time: O(n * sqrt(n)), memory: O(n)
    int numFactoredBinaryTrees(vector<int>& arr) {
        int n = arr.size();
        long long dp[n];
        memset(dp, -1, sizeof(dp));
        unordered_map<int, int> s;
        int i = 0;
        while(i < n) {
            s[arr[i]] = i;
            i++;
        }
        i = 0;
        while(i < n) {
            fill(i, n, arr, s, dp);
            i++;
        }
        i = 0;
        long long res = 0;
        while(i < n) {
            res += dp[i];
            i++;
        }
        return res % 1000000007;
    }

    void findDivisors(int n, vector<int>& div)
    {
        for(int i = 1; i <= sqrt(n); i++) {
            if (n % i == 0) {
                if (n / i == i) {
                    div.push_back(i);
                } else {
                    div.push_back(i);
                    div.push_back(n / i);
                }
            }
        }
    }

    void fill(int i, int n, vector<int>& arr, unordered_map<int, int>& s, long long dp[]) {
        if (dp[i] != -1) {
            return;
        }
        vector<int> div;
        findDivisors(arr[i], div);
        long long res = 1;
        for(auto& d: div) {
            if (s.find(d) != s.end() && s.find(arr[i] / d) != s.end()) {
                // cout << arr[i] / d << " " << d << endl;
                fill(s[d], n, arr, s, dp);
                fill(s[arr[i] / d], n, arr, s, dp);
                res += dp[s[d]] * dp[s[arr[i] / d]];
            }
        }
        dp[i] = res;
    }
};

int main() {
    vector<int> arr = {757, 140, 649, 585, 389, 608, 457, 474, 225, 966, 736, 892, 383, 935, 462, 58, 884, 664, 109, 379, 691, 764, 165, 758, 156, 974, 459, 578, 871, 215, 176, 55, 226, 85, 619, 759, 227, 371, 911, 108, 676, 92, 400, 63, 163, 714, 536, 628, 969, 732, 923, 819, 129, 914, 553, 252, 998, 57, 856, 66, 368, 885, 20, 27, 771, 499, 336, 833, 529, 552, 565, 71, 930, 847, 452, 975, 927, 893, 301, 113, 571, 395, 200, 897, 777, 663, 828, 845, 680, 696, 815, 987, 150, 545, 114, 93, 715, 939, 887, 396, 123, 582, 186, 87, 516, 621, 291, 958, 675, 253, 131, 292, 780, 193, 361, 672, 79, 979, 817, 42, 341, 740, 666, 251, 940, 952, 568, 933, 863, 542, 925, 921, 205, 968, 270, 960, 302, 624, 827, 286, 102, 360, 729, 704, 43, 725, 954, 572, 308, 99, 295, 48, 673, 801, 281, 789, 322, 787, 178, 617, 822, 11, 982, 972, 697, 591, 258, 2, 891, 713, 584, 177, 658, 107, 174, 148, 239, 701, 882, 487, 686, 876, 563, 994, 861, 546, 615, 508, 707, 365, 126, 278, 647, 776, 303, 83, 785, 709, 272, 121, 829, 908, 160, 401, 790, 287, 948, 61, 7, 782, 959, 207, 162, 587, 72, 590, 394, 366, 485, 228, 213, 16, 382, 549, 920, 899, 518, 500, 425, 185, 173, 29, 888, 656, 380, 316, 149, 877, 242, 705, 187, 24, 422, 894, 144, 765, 599, 197, 117, 993, 950, 633, 957, 800, 47, 372, 936, 407, 853, 600, 716, 110, 671, 900, 990, 875, 724, 917, 236, 275, 741, 319, 495, 498, 78, 112, 387, 202, 179, 161, 138, 942, 677, 883, 421, 868, 340, 206, 122, 443, 357, 415, 879, 710, 637, 681, 768, 64, 347, 168, 146, 190, 188, 450, 754, 511, 192, 428, 602, 10, 249, 119, 535, 823, 298, 642, 846, 589, 211, 874, 378, 931, 317, 429, 105, 38, 436, 406, 338, 612, 531, 60, 101, 855, 862, 181, 238, 311, 172, 416, 367, 466, 76, 392, 792, 667, 723, 604, 737, 616, 830, 36, 926, 254, 94, 136, 3, 694, 402, 424, 636, 870, 259, 562, 118, 866, 261, 359, 834, 159, 52, 745, 17, 609, 922, 560, 678, 405, 233, 326, 103, 248, 194, 393, 947, 75, 464, 525, 784, 212, 77, 4, 761, 139, 527, 458, 348, 320, 414, 762, 534, 928, 826, 944, 670, 652, 346, 158, 645, 753, 937, 96, 219, 74, 384, 980, 456, 840, 431, 956, 86, 880, 376, 345, 98, 522, 9, 171, 358, 873, 8, 455, 445, 750, 858, 934, 683, 257, 849, 991, 476, 804, 746, 999, 151, 692, 493, 483, 35, 364, 837, 33, 403, 929, 470, 478, 848, 973, 541, 575, 988, 700, 339, 224, 284, 514, 798, 264, 169, 567, 381, 640, 598, 811, 404, 268, 204, 145, 586, 551, 521, 496, 977, 669, 734, 699, 515, 733, 305, 618, 218, 507, 720, 708, 120, 719, 907, 869, 127, 964, 296, 195, 889, 231, 201, 970, 451, 963, 684, 37, 130, 913, 229, 434, 133, 423, 325, 260, 342, 237, 561, 5, 743, 809, 786, 501, 668, 528, 497, 626, 353, 985, 595, 593, 479, 141, 997, 67, 558, 255, 818, 143, 630, 441, 810, 577, 520, 217, 842, 653, 315, 352, 611, 246, 635, 388, 182, 564, 282, 592, 722, 299, 824, 314, 865, 398, 735, 744, 749, 460, 147, 573, 210, 128, 506, 370, 629, 721, 280, 646, 44, 53, 256, 442, 373, 767, 209, 116, 623, 690, 918, 269, 283, 556, 796, 363, 909, 95, 267, 916, 449, 509, 660, 397, 362, 437, 312, 473, 265, 836, 772, 543, 234, 962, 65, 208, 183, 763, 898, 15, 554, 293, 799, 839, 1000, 651, 413, 488, 557, 410, 881, 639, 674, 579, 132, 961, 580, 100, 632, 843, 852, 34, 69, 739, 808, 432, 613, 412, 588, 650, 271, 12, 606, 695, 21, 644, 860, 503, 844, 230, 324, 306, 976, 438, 992, 755, 965, 297, 788, 97, 760, 547, 50, 854, 262, 411, 51, 104, 526, 369, 867, 727, 622, 703, 943, 731, 480, 717, 331, 344, 23, 433, 250, 444, 318, 513, 603, 137, 153, 471, 453, 332, 802, 569, 14, 68, 221, 779, 399, 989, 486, 773, 19, 241, 932, 32, 13, 472, 540, 805, 583, 199, 851, 502, 795, 747, 491, 468, 46, 638, 350, 81, 263, 539, 106, 597, 235, 334, 6, 343, 447, 544, 679, 641, 505, 687, 482, 657, 285, 328, 273, 465, 337, 49, 189, 702, 519, 155, 949, 430, 198, 277, 214, 791, 512, 232, 335, 484, 983, 420, 835, 878, 135, 18, 84, 475, 838, 304, 841, 783, 712, 901, 981, 825, 73, 170, 351, 274, 266, 386, 971, 904, 216, 111, 25, 548, 864, 648, 794, 775, 290, 807, 905, 80, 910, 243, 240, 797, 288, 469, 354, 559, 435, 463, 886, 524, 91, 454, 448, 427, 419, 903, 56, 533, 300, 574, 566, 751, 859, 220, 417, 175, 40, 164, 986, 821, 594, 166, 832, 439, 30, 537, 995, 919, 124, 627, 896, 711, 682, 550, 310, 857, 154, 634, 596, 504, 330, 408, 756, 245, 530, 309, 718, 955, 157, 356, 88, 570, 728, 742, 62, 778, 355, 115, 409, 996, 693, 655, 276, 816, 625, 946, 134, 555, 377, 426, 89, 643, 766, 294, 941, 685, 770, 327, 661, 191, 390, 945, 614, 125};
    Solution sol;
    cout << sol.numFactoredBinaryTrees(arr);
    cout << endl;
    return 0;
}
